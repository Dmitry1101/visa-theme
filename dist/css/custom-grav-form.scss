//----------------------------------------------------------------------
//MIXIN
//----------------------------------------------------------------------

@mixin prefix($property,
$value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value}
}
@mixin transform($params, $backface: false) {
  @include prefix('transform', $params);
  @if $backface {
    -webkit-backface-visibility:hidden;
    backface-visibility:hidden;
  }
}

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    left:50%;
    top:50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
    transform: translate(-50%, 0);
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
    -moztransform: translate(0, -50%);
    transform: translate(0, -50%);
  }
}
@mixin box-sizing($type: border-box) {
  @include prefix('box-sizing',
          $type);
}

@mixin box-shadow($shadow) {
  @include prefix('box-shadow',
          $shadow);
}

@mixin transition($property: all,
$duration: .3s,
$easing: ease) {
  $transitions: ($property $duration $easing);
  @include prefix('transition',
          $transitions);
}

@mixin user-select($select) {
  -webkit-touch-callout: $select;
  @include prefix('user-select',
          $select);
}

@mixin placeholder {
  ::-webkit-input-placeholder {
    @content
  }
  :-moz-placeholder {
    @content
  }
  ::-moz-placeholder {
    @content
  }
  :-ms-input-placeholder {
    @content
  }
}

//Using placeholder next input
#gravityforms-block {
  @include placeholder {
    color: #808080;
    opacity: 1;
  }
}

//----------------------------------------------------------------------
//FLEXBOX
//----------------------------------------------------------------------

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

//%flexbox { @include flexbox; }

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

//%inline-flex { @include inline-flex; }

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg;
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

/*
Flexbox grid @mixin
EXAMPLE
.flexbox {
    @include boxGrid(5, 4%);
}
*/
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@mixin boxGrid($columnNumber, $spacingPercent) {
  $contentPercent: 100%;
  $sideMargin: ($spacingPercent/2);
  $marginInt: strip-units($sideMargin);
  @include justify-content(flex-start);
  @include flex-flow(wrap);
  @include transition();
  @include flexbox();
  margin: #{0} -#{$sideMargin};
  width: $contentPercent + $spacingPercent;
  > * {
    width: ($contentPercent/$columnNumber) - $spacingPercent;
    margin: 0 #{$sideMargin} ($marginInt + ($marginInt / $columnNumber) * 1em)
  }
}
$selectric-main-color:      #DDD !default;                                              // Color used in border
$selectric-secondary-color: #BBB !default;                                              // Color used in button
$selectric-text-color:      #444 !default;                                              // Color used in label
$selectric-bg-color:        #F8F8F8 !default;                                           // Background color
$selectric-btn-bg-color:    #F8f8f8 !default;                                           // Button background color
$selectric-height:          40px !default;                                              // Outer height
$selectric-spacing:         10px !default;                                              // Label left padding
$selectric-border-width:    1px !default;                                               // Outer border width
$selectric-border-radius:   0px !default;                                               // Border radius
$selectric-inner-height:    $selectric-height - ($selectric-border-width * 2) !default; // Inner height
$selectric-font-size:       12px !default;                                              // Font size

.selectric-wrapper {
  position: relative;
  cursor: pointer;
}

.selectric-responsive {
  width: 100%;
}

.selectric {
  background: #f7f7f7;
  position: relative;
  overflow: hidden;

  .label {
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin: 0 $selectric-inner-height 0 20px;
    font-family: "OpenSansRegular";
    font-size: 14px;
    line-height: 45px;
    color: $selectric-text-color;
    height: 45px;
    user-select: none;
  }

  .button {
    display: block;
    position: absolute;
    right: 0;
    top: 0;
    width: $selectric-inner-height;
    height: 45px;
    text-align: center;
    font-size: 0;
    &:after {
      content: " ";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      margin: auto;
      width: 10px;
      height: 6px;
      background: url("../img/st_1.png") no-repeat;
      background-size: 100%;
    }
  }
}

.selectric-focus .selectric {
  border-color: darken($selectric-main-color, 20%);
}

.selectric-hover .selectric {
  border-color: darken($selectric-main-color, 10%);

  .button {
    color: darken($selectric-secondary-color, 10%);

    &:after {
      border-top-color: darken($selectric-secondary-color, 10%);
    }
  }
}

.selectric-open {
  z-index: 9999;

  .selectric {
    border-color: darken($selectric-main-color, 10%);
  }

  .selectric-items {
    display: block;
  }
}

.selectric-disabled {
  filter: alpha(opacity=50);
  opacity: 0.5;
  cursor: default;
  user-select: none;
}

.selectric-hide-select {
  position: relative;
  overflow: hidden;
  width: 0;
  height: 0;

  select {
    position: absolute;
    left: -100%;
  }

  &.selectric-is-native {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 10;

    select {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 100%;
      width: 100%;
      border: none;
      z-index: 1;
      box-sizing: border-box;
      opacity: 0;
    }
  }
}

.selectric-input {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  margin: 0 !important;
  padding: 0 !important;
  width: 1px !important;
  height: 1px !important;
  outline: none !important;
  border: none !important;
  *font: 0/0 a !important;
  background: none !important;
}

.selectric-temp-show {
  position: absolute !important;
  visibility: hidden !important;
  display: block !important;
}

/* Items box */
.selectric-items {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  background: $selectric-bg-color;
  border: 1px solid darken($selectric-main-color, 10%);
  z-index: -1;
  box-shadow: 0 0 10px -6px;

  .selectric-scroll {
    height: 100%;
    overflow: auto;
  }

  .selectric-above & {
    top: auto;
    bottom: 100%;
  }

  ul, li {
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: $selectric-font-size;
    line-height: 20px;
    min-height: 20px;
  }

  li {
    display: block;
    padding: 10px 20px;
    color: #666;
    cursor: pointer;

    &.selected {
      background: #E0E0E0;
      color: #444;
    }

    &.highlighted {
      background: #D0D0D0;
      color: #444;
    }

    &:hover {
      background: #D5D5D5;
      color: #444;
    }
  }

  .disabled {
    filter: alpha(opacity=50);
    opacity: 0.5;
    cursor: default !important;
    background: none !important;
    color: #666 !important;
    user-select: none;
  }

  .selectric-group {
    .selectric-group-label {
      font-weight: bold;
      padding-left: 10px;
      cursor: default;
      user-select: none;
      background: none;
      color: #444;
    }

    &.disabled li {
      filter: alpha(opacity=100);
      opacity: 1;
    }

    li {
      padding-left: 25px;
    }
  }
}













.row{
  width: 1180px;
  max-width: 90%;
  margin: 0 auto;
  position: relative;
}
.gform_item_wrapper_begin{
  -webkit-box-shadow: 0 6px 24px rgba(0,0,0,.1);
  -moz-box-shadow: 0 6px 24px rgba(0,0,0,.1);
  box-shadow: 0 6px 24px rgba(0,0,0,.1);
  background: #ffffff;
  padding: 60px 60px 50px 60px !important;
}


.trip-info_section_style {
  //-webkit-box-shadow: 0 6px 24px rgba(0,0,0,.1);
  //-moz-box-shadow: 0 6px 24px rgba(0,0,0,.1);
  //box-shadow: 0 6px 24px rgba(0,0,0,.1);

}
//.traveler_custom_style {
//  background: #ffffff;
//  padding: 60px 60px 50px 60px !important;
//  margin: 0 0 60px 0px!important;
//  border-radius: 0;
//}
//.traveler_discount_style {
//  background: #ffffff;
//  padding: 60px 60px 15px 60px !important;
//  margin: 0!important;
//  border-radius: 0;
//}
//.margin_from_traveler1 {
//  background-color: #ffffff;
//  margin: 0!important;
//  padding: 15px 60px 15px 60px !important;
//}
//.spacing_traveler_no {
//  background-color: #ffffff;
//  padding: 15px 60px 50px 60px !important;
//  margin: 0!important;
//}
//.traveler_text_box_custom_style {
//  background-color: #ffffff;
//  padding: 15px 60px 50px 60px !important;
//  margin: 0!important;
//}
//.general_section_style {
//  background-color: #ffffff;
//  padding: 40px 50px 15px 50px !important;
//  margin: 0!important;
//}





#field_2_56{
  padding: 40px 50px 50px 50px !important;
}
#field_2_53,#field_2_56,#field_2_298{
  width: 100%;
}







#gravityforms-block{
  padding: 60px 0;
  background: #f7f7f7;
  border-top: 5px solid #000;
  border-bottom: 5px solid #000;




  input[type=text], input[type=email],input[type=tel],textarea,select{
    padding: 0 20px;
    height: 45px;
    background: #f7f7f7;
    color: #808080;
    border: none;
    border-radius: 0;
    font-family: "OpenSansRegular";
    font-size: 14px;
    @include transition();
    border: 1px solid transparent;
    &:focus{
      border: 1px solid #11999c;
      border-radius: 0;
    }
  }
  textarea{
    padding: 20px 20px;
    height: 215px;
    resize: none;
  }
  input[type="submit"]{
    background: #3498db;
    border-radius: 23px;
    font-size: 16px;
    font-family: "OpenSansBold";
    text-transform: uppercase;
    border: none;
    padding: 15px 45px;
    color: #fff;
    @include transition();
    cursor: pointer;
    &:hover{
      box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -webkit-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -moz-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -o-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
    }
  }
  input[type="button"]{
    background: #11999c;
    border-radius: 23px;
    font-size: 16px;
    font-family: "OpenSansBold";
    text-transform: uppercase;
    border: none;
    padding: 15px 45px;
    color: #fff;
    @include transition();
    cursor: pointer;
    &:hover{
      box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -webkit-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -moz-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
      -o-box-shadow: 0 25px 50px -25px rgba(0, 0, 0, 0.5) inset;
    }
  }
  input[type="radio"] {
    opacity: 0;
  }
  input[type="radio"] + label{
    cursor: pointer;
    position: relative;
    color: #000000;
    font-family: "OpenSansRegular";
    font-size: 16px;
    padding-left: 30px;
    &:before{
      content: '';
      position: absolute;
      top:5px;
      left: 0;
      background: #f7f7f7;
      width: 14px;
      height: 14px;
      border: 1px solid #cccccc;
      border-radius: 50%;
    }
  }

  input[type="radio"]:checked + label{
    color: #11999c;
    &:before{
      background: #11999c;
      border: 1px solid #11999c;
    }
  }

  .flight_discount_price{
    @include flexbox();
    @include justify-content(space-between);
    @include flex-direction();
    @include align-items(center);
    @include flex-wrap(wrap);
    overflow: hidden;
    padding-right: 0;
    padding-bottom: 10px;
    position: relative;
    &:before{
      content: '';
      position: absolute;
      top: 15px;
      right: 0;
      left: 0;
      background: url(../img/dosh.png) repeat-x;
      width: 999px;
      height: 1px;
      z-index: 0;
    }
    label{
      background: #fff;
      padding: 0 15px 0 0 !important;
      position: relative;
      z-index: 1;
    }
    .ginput_container{
      width: auto;
      margin: 0;
      padding-bottom: 24px;
      text-align: right;
      position: absolute;
      z-index: 1;
      top: -13px;
      right: 0;
      input{
        width: 160px;
        background: #fff;
        color: #069d26;
        font-family: "OpenSansBold";
        font-size: 30px;
        text-align: right;
        border: none;
        &:focus{
          border: none;
        }
      }
    }
  }


  .ginput_container_radio{
    display: inline-block;
    vertical-align: middle;
    margin: 0;
    li{
      margin: 0;
    }
  }
  .gform_heading{
    text-align: center;
    color: #000000;
    font-size: 30px;
    margin-bottom: 40px;
    h3{
      font-family: "MyriadProRegular";
      padding-bottom: 20px;
      color: #000;
    }
  }
  //.gfield{
  //  padding: 0;
  //}
  .gfield_description{
    margin-bottom: 15px;
    padding-top: 5px;
  }
  .gfield_required{
    font-size: 16px;
    color: #000000;
    font-family: "OpenSansRegular";
  }

  .gform_wrapper .gform_body .gform_fields .gfield.field_description_below .gfield_label {
    font-family: "OpenSansRegular";
    font-weight: 400;
    font-size: 16px;
    color: #000000;
    padding: 0px 0px 28px 0;
  }
  .gform_wrapper .gform_body .gform_fields .gfield.field_description_above .gfield_label{
    padding: 0px 0px 1px 0;
  }


  p{
    font-family: "OpenSansRegular" !important;
    font-weight: 400 !important;
    font-size: 16px;
    color: #000000;
    padding: 0px 0px 20px 0;
    a{
      border-bottom: none;
    }
  }
  .protection_ins1, .protection_ins_tick{
    p{
      position: relative;
      padding-left: 10px;
      &:before{
        content: '';
        background: url("../img/st.png") no-repeat;
        background-size: 100%;
        width: 15px;
        height: 11px;
        position: absolute;
        top: 6px;
        left: 0;
      }
    }
  }
  .gsection{
    text-align: center;
    border-bottom: none;
    margin: 50px 0 40px 0 !important;
    position: relative;
    padding: 0 0 10px 0;
    &:before{
      content: '';
      @include center(true,false);
      bottom: -20px;
      width: 100px;
      height: 6px;
      background: #f9dfb9;

    }
    h2{
      font-family: "GothamProBold";
      color: #000000;
      font-size: 30px;
    }
  }
}

html body #gravityforms-block #gform_2 .gform_body .field_description_below{
  > div{
    font-family: "OpenSansRegular" !important;
    font-weight: 400 !important;
    font-size: 16px;
  }
}
body #gravityforms-block .gform_wrapper img.ui-datepicker-trigger {
  width: 45px!important;
  height: 45px!important;
  background: #f7f7f7;
  display: inline-block;
  padding: 10px 10px;
  vertical-align: top;
  margin-left: -4px;
  cursor: pointer;
}



body #gravityforms-block .gform_wrapper .gform_body li.gfield.price_block{
  width: 100%;
  border-right: 1px dashed #000;
  border-bottom: 1px dashed #000;
  position: relative;
  margin: 0;
  padding: 0 45px 0 45px !important;
  .gfield_label{
    padding: 28px 0 28px 0 !important;
  }
  .ginput_container{
    position: absolute;
    top:0;
    right: 0;
    .ginput_product_price_label{
      color: #000;
      font-family: "OpenSansBold";
      font-size: 16px;
    }
    .ginput_product_price{
      color: #069d26;
      font-family: "OpenSansBold";
      font-size: 24px;
    }
  }
}
li.gfield .price_block{

  &:first-of-type{
    border-top: 1px dashed #000 !important;
  }
  &:last-of-child{
    border-bottom: 1px dashed red !important;
  }

}

body #gravityforms-block .gform_wrapper .gform_body li.gfield.gf_right_half{
  display: none;
}
.ginput_total{
  color: #069d26;
  font-family: "OpenSansBold";
  font-size: 24px;
}
























